package utilities

trait Settings {
  
  val HELP = "help"
  val STRING_INDICATOR = "string"
  val BOOLEAN_INDICATOR = "boolean"
  val INTEGER_INDICATOR = "integer"
  val DOUBLE_INDICATOR = "double"
  
  val TRAINING_OPTION = "train"
  val TESTING_OPTION = "test"
  val OUTPUT_OPTION = "output"
  val RUNNING_MODE_OPTION = "mode"
  val EXACT_OPTION = "exact"
  val CG_OPTION = "cg"
  val LBFGS_OPTION = "lbfgs"
  val CD_OPTION = "cd"
  val QN_OPTION = "qn"
  val CA_OPTION = "ca"
  val ITERATION_OPTION = "max_iter"
  val REGULARIZER_OPTION = "lambda"
  val L1_REGULARIZATION = "l1"
  val L1_REGULARIZATION_OPTION = "l1"
  val L2_REGULARIZATION = "l2"
  val ADMM_RHO = "rho"
  val BADMM_GAMMA = "gamma"
  val GAMMA = "gamma"
  val ETA = "eta"
  val LAMBDA = "lambda"
  val BAYESIAN_OPTION = "bayesian"
  val BIAS_OPTION = "bias"
  val LOG_OPTION = "log"
  val ARD_OPTION = "ard"
  val ARD_ETA_OPTION = "ard_eta"
  val ARD_GAMMA_OPTION = "ard_gamma"
  val P_OPTION = "P"
  val FEATURE_SUPPORT_THRESHOLD = "th"
  val FEATURE_THRESHOLD_OPTION = "th"
  val NUM_CORES_OPTION = "cores"
  val INTERVAL_OPTION = "interval"
  val DISTRIBUTE_FEATURES_OPTION = "distf"
  val NUM_PARTITIONS_OPTION = "parts"
  val TARGET_AUC_OPTION = "auc"
  val UPDATE_LAMBDA_OPTION = "update_lambda"
  val PATH_SEPERATOR = "/"
  
  val GIBBS_SAMPLING_OPTION = "Gibbs"
  val VB_INFERENCE_OPTION = "VB"
  val MCMC_INFERENCE_OPTION = "MCMC"
  val ADMM_OPTION = "ADMM"
  val MH_OPTION = "MH"
  val FIRST_ORDER_OPTION = "first_order"
  val ALPHA_OPTION = "alpha"
  val KAPPA_OPTION = "kappa"
  val NUM_ROW_BLOCKS_OPTION = "row_blocks"
  val NUM_COL_BLOCKS_OPTION = "col_blocks"
  val ROW_REPLICA_RATIO_OPTION = "row_rep"
  val COL_REPLICA_RATIO_OPTION = "col_rep"
  val BURN_IN_OPTION = "burn_in"
  val UPDATE_RANDOM_EFFECT_OPTION = "update_random_effect"
  val UPDATE_GAMMA_X_OPTION = "update_gamma_x"
  val UPDATE_GAMMA_R_OPTION = "update_gamma_r" 
  val UPDATE_GAMMA_C_OPTION = "update_gamma_c"
  val UPDATE_GAMMA_OPTION = "update_gamma"
  val GAMMA_R_INIT_OPTION = "gamma_r"
  val GAMMA_C_INIT_OPTION = "gamma_c"
  val GAMMA_X_INIT_OPTION = "gamma_x"
  val GAMMA_INIT_OPTION = "gamma"
  val LAMBDA_R_INIT_OPTION = "lambda_r"
  val LAMBDA_C_INIT_OPTION = "lambda_c"
  val NUM_LATENT_FACTORS_OPTION = "K"  
  val NUM_SLICES_OPTION = "num_slices"
  val NUM_REDUCERS_OPTION = "num_reducers"
  val OUTER_ITERATION_OPTION = "outer_iter"
  val INNER_ITERATION_OPTION = "inner_iter"
  val LAMBDA_INIT_OPTION = "lambda"
  val MEAN_OPTION = "mean"
  val SCALE_OPTION = "scale"
  val ISO_OPTION = "iso"
  val JAR_OPTION = "jar"
  val TMP_DIR_OPTION = "tmp_dir"
  val ROW_REP_RATIO_OPTION = "row_rep_ratio"
  val COL_REP_RATIO_OPTION = "col_rep_ratio"
  val NUM_ROWS_OPTION = "num_rows"
  val NUM_COLS_OPTION = "num_cols"
  val PG_R_OPTION = "pg_r"
  val PG_C_OPTION = "pg_c"
  val PI_INIT_OPTION = "pi"
  val NUM_GLOBAL_FACTORS_OPTION = "K0"
  val GMM_OPTION = "gmm"
  val MULTI_THREAD_OPTION = "multi_thread"
  val MAX_NORM_OPTION = "max_norm"
  val TRAINING_RATIO_OPTION = "train_ratio"
  val SPARSITY_LEVEL_OPTION = "sparsity_level"
  val SYNTHETIC_DATA_OPTION = "synthetic"
  val NUM_BLOCKS_1_OPTION = "num_blocks1"
  val NUM_BLOCKS_2_OPTION = "num_blocks2"
  val NUM_BLOCKS_3_OPTION = "num_blocks3"
  val LAMBDA_1_INIT_OPTION = "lambda1"
  val LAMBDA_2_INIT_OPTION = "lambda2"
  val LAMBDA_3_INIT_OPTION = "lambda3"
  val UPDATE_GAMMA_1_OPTION = "update_gamma1"
  val GAMMA_1_INIT_OPTION = "gamma1"
  val UPDATE_GAMMA_2_OPTION = "update_gamma2"
  val GAMMA_2_INIT_OPTION = "gamma2"
  val UPDATE_GAMMA_3_OPTION = "update_gamma3"
  val GAMMA_3_INIT_OPTION = "gamma3"
  val DIM_1_SIZE_OPTION = "size1"
  val DIM_2_SIZE_OPTION = "size2"
  val DIM_3_SIZE_OPTION = "size3"
  val MULTICORE_OPTION = "multicore"
  val MARKOV_OPTION = "markov"
  val TENSOR_OPTION = "tf"
  val BUFFER_SIZE_OPTION = "buffer"
  val NUM_INIT_OPTION = "num_init"
  val EMPIRICAL_BAYES_OPTION = "emBayes"
  val JAAK_BOUND_OPTION = "jaak"
  val BOHN_BOUND_OPTION = "bohn"
  val BINARY_FEATURES_OPTION = "binary"
  val IS_OPTION = "IS"
  val NUM_SAMPLES_OPTION = "num_samples"
  val SEQUENCE_FILE_OPTION = "seq"
  val MEMORY_OPTION = "memory"
  val NUM_OUTPUT_BLOCKS_OPTION = "num_output_blocks"
  def hash(x: Int): Int = {
    val r = x ^ (x >>> 20) ^ (x >>> 12)
    r ^ (r >>> 7) ^ (r >>> 4)
  }
}